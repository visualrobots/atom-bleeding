--- a/build/Gruntfile.coffee
+++ b/build/Gruntfile.coffee
@@ -304,7 +304,7 @@

   grunt.registerTask('ci', ciTasks)

-  defaultTasks = ['download-electron', 'download-electron-chromedriver', 'build', 'set-version', 'generate-asar']
+  defaultTasks = ['build', 'set-version', 'generate-asar']
   unless process.platform is 'linux' or grunt.option('no-install')
     defaultTasks.push 'install'
   grunt.registerTask('default', defaultTasks)
--- a/build/tasks/build-task.coffee
+++ b/build/tasks/build-task.coffee
@@ -14,19 +14,6 @@
     rm path.join(buildDir, 'installer')
     mkdir path.dirname(buildDir)

-    if process.platform is 'darwin'
-      cp 'electron/Electron.app', shellAppDir, filter: /default_app/
-      fs.renameSync path.join(shellAppDir, 'Contents', 'MacOS', 'Electron'), path.join(shellAppDir, 'Contents', 'MacOS', 'Atom')
-      fs.renameSync path.join(shellAppDir, 'Contents', 'Frameworks', 'Electron Helper.app'), path.join(shellAppDir, 'Contents', 'Frameworks', 'Atom Helper.app')
-      fs.renameSync path.join(shellAppDir, 'Contents', 'Frameworks', 'Atom Helper.app', 'Contents', 'MacOS', 'Electron Helper'), path.join(shellAppDir, 'Contents', 'Frameworks', 'Atom Helper.app', 'Contents', 'MacOS', 'Atom Helper')
-    else
-      cp 'electron', shellAppDir, filter: /default_app/
-
-      if process.platform is 'win32'
-        fs.renameSync path.join(shellAppDir, 'electron.exe'), path.join(shellAppDir, 'atom.exe')
-      else
-        fs.renameSync path.join(shellAppDir, 'electron'), path.join(shellAppDir, 'atom')
-
     mkdir appDir

     if process.platform isnt 'win32'
--- a/package.json
+++ b/package.json
@@ -12,7 +12,6 @@
     "url": "https://github.com/atom/atom/issues"
   },
   "license": "MIT",
-  "electronVersion": "0.37.8",
   "dependencies": {
     "async": "0.2.6",
     "atom-keymap": "6.3.2",
--- a/src/module-cache.coffee
+++ b/src/module-cache.coffee
@@ -194,7 +194,7 @@
   return

 registerBuiltins = (devMode) ->
-  if devMode or not cache.resourcePath.startsWith("#{process.resourcesPath}#{path.sep}")
+  if devMode or not cache.resourcePath.startsWith("/usr/lib/atom")
     fs = require 'fs-plus'
     atomCoffeePath = path.join(cache.resourcePath, 'exports', 'atom.coffee')
     cache.builtins.atom = atomCoffeePath if fs.isFileSync(atomCoffeePath)
--- a/src/package-manager.coffee
+++ b/src/package-manager.coffee
@@ -526,7 +526,7 @@

   isBundledPackagePath: (packagePath) ->
     if @devMode
-      return false unless @resourcePath.startsWith("#{process.resourcesPath}#{path.sep}")
+      return false unless @resourcePath.startsWith("/usr/lib/atom")

     @resourcePathWithTrailingSlash ?= "#{@resourcePath}#{path.sep}"
     packagePath?.startsWith(@resourcePathWithTrailingSlash)
--- a/static/index.js
+++ b/static/index.js
@@ -29,7 +29,7 @@
         throw loadSettingsError
       }

-      var devMode = loadSettings.devMode || !loadSettings.resourcePath.startsWith(process.resourcesPath + path.sep)
+      var devMode = loadSettings.devMode || !loadSettings.resourcePath.startsWith('/usr/lib/atom')

       if (devMode) {
         setupDeprecatedPackages()
